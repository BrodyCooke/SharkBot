import requests
import json

def main():
    # Specify the URL of the API endpoint you want to query
    api_url = "https://overfast-api.tekrop.fr/players/SherdyShark-1475/stats/career"
    api_url2 = "https://overfast-api.tekrop.fr/players/MiniMartian-11891/stats/career"

    # Specify the query parameter and its value
    params = {
        "gamemode": "competitive"
    }
    params2 = {
        "gamemode": "competitive"
    }

    try:
        # Perform a GET request to the API endpoint with the specified parameters
        response = requests.get(api_url, params=params)


        # Check if the request was successful (status code 200)
        if response.status_code == 200:
            # Print the response content (JSON format)
            print("Response Content:")
            dict1 = response.json()
            #print(json.dumps(dict1["all-heroes"], indent=4))
        else:
            # Print an error message if the request was not successful
            print(f"Error: {response.status_code}")
    except Exception as e:
        # Print an error message if an exception occurred during the request
        print(f"Error: {e}")


    try:
        # Perform a GET request to the API endpoint with the specified parameters
        response2 = requests.get(api_url2, params=params2)

        # Check if the request was successful (status code 200)
        if response2.status_code == 200:
            # Print the response content (JSON format)
            print("Response2 Content:")
            dict2 = response2.json()
            #print(json.dumps(dict2["all-heroes"], indent=4))
        else:
            # Print an error message if the request was not successful
            print(f"Error: {response2.status_code}")
    except Exception as e:
        # Print an error message if an exception occurred during the request
        print(f"Error: {e}")
    
    hero = 'ana'
    players = {'player1': {} , 'player2': {}}
    for key in dict1[hero]:
        for elm in dict1[hero][key]:
            if 'avg_per_10_min' in elm:
                players['player1'][elm]=(dict1[hero][key][elm])

    for key in dict2[hero]:
        for elm in dict2[hero][key]:
            if 'avg_per_10_min' in elm:
                players['player2'][elm]=(dict2[hero][key][elm])
    print(json.dumps(players, indent=4))

    
    common_keys = set(players['player1'].keys()) & set(players['player2'].keys())
    outstring = f"{'Player1':>52} {'Player2':>20}\n"
    for key in common_keys: 
        value_width = 50 - len(key)
        outstring += f"{key}: {players['player1'][key]:>{value_width}} {players['player2'][key]:>20}\n"
    print(outstring)



def get_player_stats(player):
     # Specify the URL of the API endpoint you want to query
    api_url = f"https://overfast-api.tekrop.fr/players/{player}/stats/career"

    # Specify the query parameter and its value
    params = {
        "gamemode": "competitive"
    }

    try:
        # Perform a GET request to the API endpoint with the specified parameters
        response = requests.get(api_url, params=params)

        # Check if the request was successful (status code 200)
        if response.status_code == 200:
            # Print the response content (JSON format)
            rtv = response.json()
        else:
            # Print an error message if the request was not successful
            print(f"Error: {response.status_code}")
    except Exception as e:
        # Print an error message if an exception occurred during the request
        print(f"Error: {e}")
    return rtv

def compare_by_hero(name1, name2, player1,player2,hero = 'all-heroes'):
    players = {'player1': {} , 'player2': {}}
    for key in player1[hero]:
        for elm in player1[hero][key]:
            if 'avg_per_10_min' in elm:
                players['player1'][elm]=(player1[hero][key][elm])

    for key in player2[hero]:
        for elm in player2[hero][key]:
            if 'avg_per_10_min' in elm:
                players['player2'][elm]=(player2[hero][key][elm])
    #print(json.dumps(players, indent=4))

    common_keys = list(set(players['player1'].keys()) & set(players['player2'].keys()))
    common_keys.sort()
    value_width = 52 - len(f"Hero name: {hero}")
    outstring = f"Hero name: {hero} {name1:>{value_width}} {name2:>20}\n"
    for key in common_keys: 
        value_width = 50 - len(key)
        outstring += f"{key}: {players['player1'][key]:>{value_width}} {players['player2'][key]:>20}\n"
    print(outstring)
    return outstring


if __name__ == "__main__":
    p1 = get_player_stats('SherdyShark-1475')
    p2 = get_player_stats('MiniMartian-11891')
    p2 = get_player_stats('TwisterF5-1368')
    compare_by_hero('SherdyShark-1475','TwisterF5-1368',p1,p2,hero='ana')
